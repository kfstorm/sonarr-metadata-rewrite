name: Release and Docker Publish

on:
  push:
    tags:
      - 'v*'
  schedule:
    # Daily at midnight UTC for nightly builds
    - cron: '0 0 * * *'
  workflow_dispatch:

env:
  REGISTRY: docker.io
  IMAGE_NAME: kfstorm/sonarr-metadata-rewrite

jobs:
  check-changes:
    if: github.event_name == 'schedule'
    runs-on: ubuntu-latest
    outputs:
      skip: ${{ steps.check.outputs.skip }}
    steps:
    - uses: actions/checkout@v5

    - name: Check for changes since last nightly build
      id: check
      run: |
        set -e

        # Get current commit
        current_commit=$(git rev-parse HEAD)
        echo "Current commit: $current_commit"

        # Try to get the last nightly build commit from Docker Hub
        echo "Checking Docker Hub for last nightly build..."

        # Get anonymous auth token
        token_response=$(curl -s "https://auth.docker.io/token?service=registry.docker.io&scope=repository:kfstorm/sonarr-metadata-rewrite:pull")
        if [ $? -ne 0 ] || [ -z "$token_response" ]; then
          echo "Failed to get auth token, proceeding with build"
          echo "skip=false" >> $GITHUB_OUTPUT
          exit 0
        fi

        token=$(echo "$token_response" | jq -r '.token')
        if [ -z "$token" ] || [ "$token" = "null" ]; then
          echo "Invalid auth token, proceeding with build"
          echo "skip=false" >> $GITHUB_OUTPUT
          exit 0
        fi

        # Get nightly image manifest (OCI Image Index)
        manifest_response=$(curl -s -H "Accept: application/vnd.docker.distribution.manifest.v2+json" -H "Authorization: Bearer $token" "https://registry-1.docker.io/v2/kfstorm/sonarr-metadata-rewrite/manifests/nightly")
        if [ $? -ne 0 ] || [ -z "$manifest_response" ]; then
          echo "No nightly image found or failed to fetch manifest, proceeding with build"
          echo "skip=false" >> $GITHUB_OUTPUT
          exit 0
        fi

        # Get first platform manifest from OCI Image Index
        first_manifest_digest=$(echo "$manifest_response" | jq -r '.manifests[0].digest')
        if [ -z "$first_manifest_digest" ] || [ "$first_manifest_digest" = "null" ]; then
          echo "No platform manifest found, proceeding with build"
          echo "skip=false" >> $GITHUB_OUTPUT
          exit 0
        fi

        # Get platform-specific manifest to find config digest
        platform_manifest=$(curl -s -H "Accept: application/vnd.oci.image.manifest.v1+json" -H "Authorization: Bearer $token" "https://registry-1.docker.io/v2/kfstorm/sonarr-metadata-rewrite/manifests/$first_manifest_digest")
        config_digest=$(echo "$platform_manifest" | jq -r '.config.digest // empty')
        if [ -z "$config_digest" ] || [ "$config_digest" = "null" ]; then
          echo "No config digest found, proceeding with build"
          echo "skip=false" >> $GITHUB_OUTPUT
          exit 0
        fi

        echo "Config digest: $config_digest"

        # Get image config with labels
        config_response=$(curl -L -s -H "Authorization: Bearer $token" "https://registry-1.docker.io/v2/kfstorm/sonarr-metadata-rewrite/blobs/$config_digest")
        if [ $? -ne 0 ] || [ -z "$config_response" ]; then
          echo "Failed to fetch image config, proceeding with build"
          echo "skip=false" >> $GITHUB_OUTPUT
          exit 0
        fi

        # Extract commit SHA from org.opencontainers.image.revision label
        last_commit=$(echo "$config_response" | jq -r '.config.Labels."org.opencontainers.image.revision" // empty')
        if [ -z "$last_commit" ] || [ "$last_commit" = "null" ]; then
          echo "No revision label found, proceeding with build"
          echo "skip=false" >> $GITHUB_OUTPUT
          exit 0
        fi

        echo "Last nightly build commit: $last_commit"

        # Compare commits
        if [ "$current_commit" = "$last_commit" ]; then
          echo "No changes since last nightly build, skipping build"
          echo "skip=true" >> $GITHUB_OUTPUT
        else
          echo "Changes detected since last nightly build, proceeding with build"
          echo "skip=false" >> $GITHUB_OUTPUT
        fi

  create-release:
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        generate_release_notes: true
        make_latest: true

  extract-metadata:
    needs: [check-changes]
    if: always() && (github.event_name != 'schedule' || needs.check-changes.outputs.skip != 'true')
    runs-on: ubuntu-latest
    outputs:
      tags: ${{ steps.meta.outputs.tags }}
      labels: ${{ steps.meta.outputs.labels }}
    steps:
    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.IMAGE_NAME }}
        tags: |
          # For releases (tags starting with v) - use semantic versioning without 'v' prefix
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          # For nightly builds (scheduled runs from main branch)
          type=raw,value=nightly,enable={{is_default_branch}}
          type=raw,value=nightly-{{date 'YYYY-MM-DD'}},enable={{is_default_branch}}
          # Latest tag only for release tags
          type=raw,value=latest,enable=${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') }}
        flavor: |
          latest=false

  build-and-push:
    needs: [check-changes, extract-metadata]
    if: always() && !failure() && !cancelled() && (github.event_name != 'schedule' || needs.check-changes.outputs.skip != 'true')
    uses: ./.github/workflows/docker-build-reusable.yml
    permissions:
      contents: read
      packages: write
    with:
      push: true
      tags: ${{ needs.extract-metadata.outputs.tags }}
      labels: ${{ needs.extract-metadata.outputs.labels }}
      platforms: linux/amd64,linux/arm64
    secrets:
      DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
      DOCKER_HUB_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}

  update-docker-hub-description:
    if: startsWith(github.ref, 'refs/tags/v') && !failure() && !cancelled()
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5

    - name: Update Docker Hub description
      uses: peter-evans/dockerhub-description@v5
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}
        repository: ${{ env.IMAGE_NAME }}
        readme-filepath: ./README.md
